#lang racket
(provide (all-defined-out))

;; a cosmetic macro -- adds then, else
(define-syntax my-if
  (syntax-rules (then else)
    [(my-if e1 then e2 else e3)
     (if e1 e2 e3)]))
; (my-if foo then bar else baz) -> (if foo bar baz)

;; a macro to replace an expression with another one
(define-syntax comment-out
  (syntax-rules ()
    [(comment-out ignore instead) instead]))
; (comment-out (car null) (+ 3 4)) -> (+ 3 4)

;; (define (my-delay th)
;;   (mcons #f th))
;; (define (my-force p)
;;   (if (mcar p)
;;       (mcdr p)
;;       (begin (set-mcar! p #t)
;;              (set-mcdr! p ((mcdr p)))
;;              (mcdr p))))

; makes it so users do *not* write the thunk when using my-delay
(define-syntax my-delay
  (syntax-rules ()
    [(my-delay e)
     (mcons #f (lambda () e))]))
; this is really bad because it evaluates e multiple times
(define-syntax my-force-macro1
  (syntax-rules ()
    [(my-for e)
     (if (mca
